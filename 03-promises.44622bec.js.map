{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA8BA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,aAAY,KACNH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,MAEpBA,MAtCQQ,SAASC,cAAc,QAE/BC,iBAAiB,UAExB,SAAgCC,GAC9BA,EAAIC,iBACJ,MAAMZ,MAAEA,EAAKa,KAAEA,EAAIC,OAAEA,GAAWH,EAAII,OAE9BC,EAAaC,OAAOjB,EAAMkB,OAC1BC,EAAYF,OAAOJ,EAAKK,QAMhC,SAAyBE,EAAOC,EAAOR,GACrC,IAAK,IAAIS,EAAI,EAAGA,GAAKF,EAAOE,GAAK,EAAG,CAElCxB,EAAcwB,EADHD,EAAQR,GAAQS,EAAI,IAE5BC,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBJ,EAAA4B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,UAEtD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBJ,EAAA4B,OAAOG,QAAQ,sBAAoB5B,QAAeC,WAXxD4B,CAFkBX,OAAOH,EAAOI,OAELF,EAAYG","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('form');\n\nformEl.addEventListener('submit', onSubmitCreatePromises);\n\nfunction onSubmitCreatePromises(evt) {\n  evt.preventDefault();\n  const { delay, step, amount } = evt.target;\n\n  const firstDelay = Number(delay.value);\n  const delayStep = Number(step.value);\n  const amountNum = Number(amount.value);\n\n  promisesCounter(amountNum, firstDelay, delayStep);\n}\n\nfunction promisesCounter(count, delay, step) {\n  for (let i = 1; i <= count; i += 1) {\n    let time = delay + step * (i - 1);\n    createPromise(i, time)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setInterval","document","querySelector","addEventListener","evt","preventDefault","step","amount","target","firstDelay","Number","value","delayStep","count","delay1","i","then","Notify","success","catch","failure","$47d4ff9957288465$var$promisesCounter"],"version":3,"file":"03-promises.44622bec.js.map"}